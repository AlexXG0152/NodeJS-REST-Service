generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  year      Int
  artistId  String?   
  createdAt DateTime  @default(now()) 
  updatedAt DateTime  @updatedAt
  artist    Artist?   @relation(fields: [artistId], references: [id])
  // tracks    Track[]   
  favorite  Favorite[]
}

model Artist {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  grammy    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  albums    Album[]
  // tracks    Track[]
  favorite  Favorite[]
}

model Track {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  artistId  String?   //@db.Uuid
  albumId   String?   //@db.Uuid
  duration  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // artist    Artist?   @relation(fields: [artistId], references: [id])
  // album     Album?    @relation(fields: [albumId], references: [id], onDelete: SetNull)
  favorite  Favorite[]
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  login     String   @unique
  password  String   
  version   Int      @default(1)
  createdAt Int
  updatedAt Int
}

model Favorite {
  id        String   @id @default(uuid()) @db.Uuid
  artist    Artist[] // @relation(fields: [artistID], references: [id])
  album     Album[]  // @relation(fields: [albumId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  track     Track[]  // @relation(fields: [trackId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
